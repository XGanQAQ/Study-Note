
"smart_sources:CS/CodeLanguege/Web/Javascript/Js的基本数据类型.md": {"path":"CS/CodeLanguege/Web/Javascript/Js的基本数据类型.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"13e96fe64ef15968812e09d594528f556363223aad2d7f418b97e995d2b7584d","at":1747299380002},"class_name":"SmartSource","last_import":{"mtime":1734672985169,"size":6854,"at":1747299380002,"hash":"13e96fe64ef15968812e09d594528f556363223aad2d7f418b97e995d2b7584d"},"blocks":{"#":[1,2],"###JavaScript 的基本数据类型":[3,43],"###JavaScript 的基本数据类型#{1}":[5,6],"###JavaScript 的基本数据类型#1. **原始类型**（Primitive Types）":[7,28],"###JavaScript 的基本数据类型#1. **原始类型**（Primitive Types）#{1}":[8,28],"###JavaScript 的基本数据类型#2. **引用类型**（Reference Types）":[29,43],"###JavaScript 的基本数据类型#2. **引用类型**（Reference Types）#{1}":[30,43],"###JavaScript 弱类型的特点":[44,66],"###JavaScript 弱类型的特点#{1}":[45,46],"###JavaScript 弱类型的特点#1. **类型隐式转换**":[47,55],"###JavaScript 弱类型的特点#1. **类型隐式转换**#{1}":[48,55],"###JavaScript 弱类型的特点#2. **比较不同类型时的自动转换**":[56,66],"###JavaScript 弱类型的特点#2. **比较不同类型时的自动转换**#{1}":[57,66],"###需要注意的弱类型编程技巧":[67,142],"###需要注意的弱类型编程技巧#{1}":[69,70],"###需要注意的弱类型编程技巧#1. **避免隐式类型转换**":[71,79],"###需要注意的弱类型编程技巧#1. **避免隐式类型转换**#{1}":[72,79],"###需要注意的弱类型编程技巧#2. **使用 `typeof` 和 `instanceof` 检查类型**":[80,91],"###需要注意的弱类型编程技巧#2. **使用 `typeof` 和 `instanceof` 检查类型**#{1}":[81,91],"###需要注意的弱类型编程技巧#3. **处理类型转换时的边界情况**":[92,100],"###需要注意的弱类型编程技巧#3. **处理类型转换时的边界情况**#{1}":[93,100],"###需要注意的弱类型编程技巧#4. **初始化变量时要小心**":[101,109],"###需要注意的弱类型编程技巧#4. **初始化变量时要小心**#{1}":[102,109],"###需要注意的弱类型编程技巧#5. **小心数组和对象的使用**":[110,122],"###需要注意的弱类型编程技巧#5. **小心数组和对象的使用**#{1}":[111,122],"###需要注意的弱类型编程技巧#6. **避免使用 `==` 进行非严格比较**":[123,131],"###需要注意的弱类型编程技巧#6. **避免使用 `==` 进行非严格比较**#{1}":[124,131],"###需要注意的弱类型编程技巧#7. **使用 `let` 和 `const` 来避免意外重声明**":[132,142],"###需要注意的弱类型编程技巧#7. **使用 `let` 和 `const` 来避免意外重声明**#{1}":[133,142],"###总结":[143,151],"###总结#{1}":[145,151]},"outlinks":[]},