
"smart_sources:CS/CodeLanguege/CSharp/多线程入门.md": {"path":"CS/CodeLanguege/CSharp/多线程入门.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"8c4d36fed9e3d324fcee2059e530243745c7d603a7aca4797f8a20423cb11fc0","at":1747299379823},"class_name":"SmartSource","last_import":{"mtime":1731715160412,"size":714,"at":1747299379823,"hash":"8c4d36fed9e3d324fcee2059e530243745c7d603a7aca4797f8a20423cb11fc0"},"blocks":{"#线程基本概念":[1,24],"#线程基本概念#什么是多线程，为什么要用多线程":[3,4],"#线程基本概念#异步编程":[5,6],"#线程基本概念#线程池":[7,8],"#线程基本概念#线程安全":[9,18],"#线程基本概念#线程安全#{1}":[10,11],"#线程基本概念#线程安全#同步机制":[12,15],"#线程基本概念#线程安全#同步机制#{1}":[13,15],"#线程基本概念#线程安全#原子操作":[16,18],"#线程基本概念#线程安全#原子操作#{1}":[17,18],"#线程基本概念#常用实现方法":[19,24],"#线程基本概念#常用实现方法#线程":[20,20],"#线程基本概念#常用实现方法#线程池":[21,21],"#线程基本概念#常用实现方法#异步编程":[22,22],"#线程基本概念#常用实现方法#自带方法":[23,24],"#线程Thread":[25,44],"#线程Thread#线程的创建":[26,35],"#线程Thread#线程的创建#{1}":[27,35],"#线程Thread#线程的终止":[36,42],"#线程Thread#线程的终止#使用线程抛出异常来终端线程":[38,42],"#线程Thread#线程的终止#使用线程抛出异常来终端线程#{1}":[39,42],"#线程Thread#线程的挂起和恢复":[43,44],"#线程安全与同步机制":[45,45]},"outlinks":[]},