
"smart_sources:CS/OperationSystem/南京大学2024操作系统/并发/05多处理器编程.md": {"path":"CS/OperationSystem/南京大学2024操作系统/并发/05多处理器编程.md","last_embed":{"hash":null},"embeddings":{},"last_read":{"hash":"1ad662fb23e18e9a66f14cec669398eb460e94425fc13ebf9b3bceca27c6a411","at":1747299380038},"class_name":"SmartSource","last_import":{"mtime":1740897613179,"size":672,"at":1747299380038,"hash":"1ad662fb23e18e9a66f14cec669398eb460e94425fc13ebf9b3bceca27c6a411"},"blocks":{"#多处理器编程":[1,31],"#多处理器编程#入门：线程模型和线程库":[3,12],"#多处理器编程#入门：线程模型和线程库#如何编写最简短的多线程程序":[5,7],"#多处理器编程#入门：线程模型和线程库#如何编写最简短的多线程程序#{1}":[6,7],"#多处理器编程#入门：线程模型和线程库#如何证明多线程的特性":[8,12],"#多处理器编程#入门：线程模型和线程库#如何证明多线程的特性#{1}":[9,9],"#多处理器编程#入门：线程模型和线程库#如何证明多线程的特性#{2}":[10,10],"#多处理器编程#入门：线程模型和线程库#如何证明多线程的特性#{3}":[11,12],"#多处理器编程#放弃：原子性":[13,18],"#多处理器编程#放弃：原子性#最小公共子串":[15,16],"#多处理器编程#放弃：原子性#状态机模型隐含假设":[17,18],"#多处理器编程#放弃：顺序执行":[19,21],"#多处理器编程#放弃：顺序执行#{1}":[20,21],"#多处理器编程#放弃：全局指令顺序":[22,28],"#多处理器编程#放弃：全局指令顺序#{1}":[23,28],"#多处理器编程#思考":[29,31],"#多处理器编程#思考#{1}":[30,31]},"outlinks":[]},